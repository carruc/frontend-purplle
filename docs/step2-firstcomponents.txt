# PurpLLE Project - Developer Guide

## Project Overview
PurpLLE (Purposeful Lifelong Learning Environment) is a Next.js-based learning platform built with TypeScript, focusing on creating an effective environment for continuous learning and self-assessment.

## Technical Stack
- Next.js 15.3.2 with App Router
- React 19
- TypeScript 5
- TailwindCSS 4
- Radix UI Components
- Jest for Testing
- Node.js ≥24.0.0

## Project Structure
```
frontend-purplle/
├── src/
│   ├── app/          # Next.js app router pages and layouts
│   ├── components/   # Reusable React components
│   ├── lib/         # Utilities, hooks, and shared logic
│   ├── middleware/  # Next.js middleware
│   └── styles/      # Global styles and Tailwind configuration
├── public/          # Static assets
└── docs/           # Project documentation
```

## Getting Started
1. Install dependencies:
   ```bash
   npm install
   ```

2. Run development server:
   ```bash
   npm run dev
   ```

3. Run tests:
   ```bash
   npm test
   ```

## Implementation Guidelines

### Component Development

1. **Component Location**
   - Place new components in `src/components/`
   - Follow the established directory structure:
     - `ui/` - Base UI components
     - `projects/` - Project-related components
     - `documents/` - Document management components
     - `sessions/` - Learning session components
     - `questions/` - Question and testing components
     - `analytics/` - Data visualization components

2. **Component Structure**
   ```typescript
   // ComponentName.tsx
   import { type ComponentProps } from '@/lib/types'
   
   export interface ComponentNameProps {
     // Props interface
   }
   
   export const ComponentName = ({ prop1, prop2 }: ComponentNameProps) => {
     // Component logic
     return (
       // JSX
     )
   }
   ```

3. **Styling Guidelines**
   - Use Tailwind CSS classes exclusively
   - Follow mobile-first responsive design
   - Use ShadCN/UI components for consistent UI elements
   - Utilize `class-variance-authority` for component variants
   - Example:
     ```typescript
     const buttonVariants = cva(
       'rounded-md text-sm font-medium transition-colors focus-visible:outline-none',
       {
         variants: {
           variant: {
             default: 'bg-primary text-primary-foreground hover:bg-primary/90',
             secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
           },
         },
         defaultVariants: {
           variant: 'default',
         },
       }
     )
     ```

### Data Handling

1. **Type Definitions**
   - Place interfaces and types in `src/lib/types/`
   - Use TypeScript interfaces for all data models
   - Example:
     ```typescript
     export interface Project {
       id: string;
       milestones: Milestone[];
       deadlineMilestone: Milestone;
       documents: Document[];
       // ... other fields
     }
     ```

2. **Server Actions**
   - Place server actions in `src/lib/actions/`
   - Use typed responses and error handling
   - Example:
     ```typescript
     'use server'
     
     export async function createProject(data: CreateProjectInput): Promise<ProjectResponse> {
       try {
         // Implementation
       } catch (error) {
         throw new Error('Failed to create project')
       }
     }
     ```

### Testing

1. **Component Tests**
   - Write tests for all components
   - Use React Testing Library
   - Focus on user interactions and accessibility
   - Example:
     ```typescript
     describe('ComponentName', () => {
       it('renders correctly', () => {
         render(<ComponentName />)
         expect(screen.getByRole('button')).toBeInTheDocument()
       })
     })
     ```

### Performance Optimization

1. **Server Components**
   - Use React Server Components by default
   - Add 'use client' directive only when necessary
   - Example:
     ```typescript
     // Only for interactive components
     'use client'
     
     export const InteractiveComponent = () => {
       // Client-side logic
     }
     ```

2. **Image Optimization**
   - Use Next.js Image component
   - Implement lazy loading
   - Provide proper width and height

### Error Handling

1. **Client-Side Errors**
   - Implement error boundaries
   - Use toast notifications for user feedback
   - Handle loading states appropriately

2. **Server-Side Errors**
   - Implement proper error handling in server actions
   - Return typed error responses
   - Log errors appropriately

## Core Workflows Implementation

When implementing new features, follow these workflows:

1. **Study Session Implementation**
   - Follow the defined session flow in the project documentation
   - Implement proper state management
   - Include all metacognitive elements
   - Ensure proper data persistence

2. **Project Management**
   - Follow the project creation workflow
   - Implement document upload and processing
   - Include motivation tracking
   - Add milestone management

## Code Quality Guidelines

1. **Naming Conventions**
   - Use descriptive names with auxiliary verbs
   - Prefix event handlers with "handle"
   - Use PascalCase for components
   - Use camelCase for functions and variables

2. **Code Organization**
   - Keep components focused and single-responsibility
   - Extract reusable logic into custom hooks
   - Use early returns for improved readability
   - Implement proper TypeScript types

3. **Accessibility**
   - Include proper ARIA attributes
   - Ensure keyboard navigation
   - Maintain proper heading hierarchy
   - Test with screen readers

## Next Steps

1. **Component Implementation Priority**
   - Complete core UI components
   - Implement session workflow components
   - Add project management interfaces
   - Develop analytics visualizations

2. **Feature Implementation**
   - Focus on core learning session workflow
   - Implement document processing
   - Add performance tracking
   - Develop motivation tracking

3. **Testing and Quality**
   - Maintain test coverage
   - Implement E2E tests
   - Ensure responsive design
   - Optimize performance

Remember to follow the project's philosophy of reducing friction for effective, continuous learning while maintaining high code quality and user experience standards.